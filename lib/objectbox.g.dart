// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/files_management/data/models/file_model.dart';
import 'features/folders_management/data/models/file_in_folder.dart';
import 'features/folders_management/data/models/folder_model.dart';
import 'features/folders_suggestion/data/models/folder_suggestion_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2434098858427425647),
      name: 'File',
      lastPropertyId: const obx_int.IdUid(7, 58758839606399882),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2323950138464305047),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8131589153575687330),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3086671693354985361),
            name: 'hash',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 8558470697784537276)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4337406317693720489),
            name: 'mimeType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6873257003480021375),
            name: 'sizeInBytes',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8146632672854709723),
            name: 'timeCreated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 58758839606399882),
            name: 'timeLastModified',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'assignmentsToFolders',
            srcEntity: 'FileInFolder',
            srcField: 'file'),
        obx_int.ModelBacklink(
            name: 'suggestedToAssignToFolders',
            srcEntity: 'FolderSuggestion',
            srcField: 'file')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4018076896688383719),
      name: 'FileInFolder',
      lastPropertyId: const obx_int.IdUid(3, 1949053105250121225),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5429908698803315048),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8306910794455041071),
            name: 'fileId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 5009936434698295647),
            relationTarget: 'File'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1949053105250121225),
            name: 'folderId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 9064873994748404812),
            relationTarget: 'Folder')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 3488129098117443698),
      name: 'Folder',
      lastPropertyId: const obx_int.IdUid(4, 5625579071453894052),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6266102643616033405),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 304757736854911331),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1152471620539843306),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 4255012574832363013),
            relationTarget: 'Folder'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5625579071453894052),
            name: 'needsConfirmation',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'children', srcEntity: 'Folder', srcField: 'parent'),
        obx_int.ModelBacklink(
            name: 'assignmentsToFiles',
            srcEntity: 'FileInFolder',
            srcField: 'folder')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 5437082916840256973),
      name: 'FolderSuggestion',
      lastPropertyId: const obx_int.IdUid(3, 1044572771021859128),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 749559492770492987),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3682903132046443271),
            name: 'colorHex',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1044572771021859128),
            name: 'folderId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 3097284329043120526),
            relationTarget: 'Folder')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 751356814963857588),
            name: 'file',
            targetId: const obx_int.IdUid(3, 2434098858427425647))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 5437082916840256973),
      lastIndexId: const obx_int.IdUid(6, 3097284329043120526),
      lastRelationId: const obx_int.IdUid(1, 751356814963857588),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2933503222850296189, 9188907239455043372],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6558802783405580143,
        9106844457950300752,
        5307462514647557182,
        2704966603259477581,
        2498238307875495402,
        3157540112820488283,
        5480118627372021280,
        2198361206089323603,
        3462129818280163342,
        8683618238728532890,
        2713778461944599971,
        8180727755434864447,
        2911965324716622281,
        97400929135809652,
        2745319765034613164,
        4123597128265334947,
        6101336469930320194,
        7511022337615134366
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    File: obx_int.EntityDefinition<File>(
        model: _entities[0],
        toOneRelations: (File object) => [],
        toManyRelations: (File object) => {
              obx_int.RelInfo<FileInFolder>.toOneBacklink(
                      2, object.id, (FileInFolder srcObject) => srcObject.file):
                  object.assignmentsToFolders,
              obx_int.RelInfo<FolderSuggestion>.toManyBacklink(1, object.id):
                  object.suggestedToAssignToFolders
            },
        getId: (File object) => object.id,
        setId: (File object, int id) {
          object.id = id;
        },
        objectToFB: (File object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final hashOffset = fbb.writeString(object.hash);
          final mimeTypeOffset = fbb.writeString(object.mimeType);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, hashOffset);
          fbb.addOffset(3, mimeTypeOffset);
          fbb.addInt64(4, object.sizeInBytes);
          fbb.addInt64(5, object.timeCreated.millisecondsSinceEpoch);
          fbb.addInt64(6, object.timeLastModified.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final hashParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final mimeTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final sizeInBytesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final timeCreatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final timeLastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final object = File(nameParam, hashParam, mimeTypeParam,
              sizeInBytesParam, timeCreatedParam, timeLastModifiedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<File>(
              object.assignmentsToFolders,
              store,
              obx_int.RelInfo<FileInFolder>.toOneBacklink(
                  2, object.id, (FileInFolder srcObject) => srcObject.file));
          obx_int.InternalToManyAccess.setRelInfo<File>(
              object.suggestedToAssignToFolders,
              store,
              obx_int.RelInfo<FolderSuggestion>.toManyBacklink(1, object.id));
          return object;
        }),
    FileInFolder: obx_int.EntityDefinition<FileInFolder>(
        model: _entities[1],
        toOneRelations: (FileInFolder object) => [object.file, object.folder],
        toManyRelations: (FileInFolder object) => {},
        getId: (FileInFolder object) => object.id,
        setId: (FileInFolder object, int id) {
          object.id = id;
        },
        objectToFB: (FileInFolder object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.file.targetId);
          fbb.addInt64(2, object.folder.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FileInFolder()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.file.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.file.attach(store);
          object.folder.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.folder.attach(store);
          return object;
        }),
    Folder: obx_int.EntityDefinition<Folder>(
        model: _entities[2],
        toOneRelations: (Folder object) => [object.parent],
        toManyRelations: (Folder object) => {
              obx_int.RelInfo<Folder>.toOneBacklink(
                      3, object.id, (Folder srcObject) => srcObject.parent):
                  object.children,
              obx_int.RelInfo<FileInFolder>.toOneBacklink(3, object.id,
                      (FileInFolder srcObject) => srcObject.folder):
                  object.assignmentsToFiles
            },
        getId: (Folder object) => object.id,
        setId: (Folder object, int id) {
          object.id = id;
        },
        objectToFB: (Folder object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.parent.targetId);
          fbb.addBool(3, object.needsConfirmation);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final needsConfirmationParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = Folder(
              name: nameParam, needsConfirmation: needsConfirmationParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.parent.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Folder>(
              object.children,
              store,
              obx_int.RelInfo<Folder>.toOneBacklink(
                  3, object.id, (Folder srcObject) => srcObject.parent));
          obx_int.InternalToManyAccess.setRelInfo<Folder>(
              object.assignmentsToFiles,
              store,
              obx_int.RelInfo<FileInFolder>.toOneBacklink(
                  3, object.id, (FileInFolder srcObject) => srcObject.folder));
          return object;
        }),
    FolderSuggestion: obx_int.EntityDefinition<FolderSuggestion>(
        model: _entities[3],
        toOneRelations: (FolderSuggestion object) => [object.folder],
        toManyRelations: (FolderSuggestion object) => {
              obx_int.RelInfo<FolderSuggestion>.toMany(1, object.id):
                  object.file
            },
        getId: (FolderSuggestion object) => object.id,
        setId: (FolderSuggestion object, int id) {
          object.id = id;
        },
        objectToFB: (FolderSuggestion object, fb.Builder fbb) {
          final colorHexOffset = fbb.writeString(object.colorHex);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, colorHexOffset);
          fbb.addInt64(2, object.folder.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final colorHexParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = FolderSuggestion(colorHex: colorHexParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.folder.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.folder.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<FolderSuggestion>(object.file,
              store, obx_int.RelInfo<FolderSuggestion>.toMany(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [File] entity fields to define ObjectBox queries.
class File_ {
  /// See [File.id].
  static final id = obx.QueryIntegerProperty<File>(_entities[0].properties[0]);

  /// See [File.name].
  static final name = obx.QueryStringProperty<File>(_entities[0].properties[1]);

  /// See [File.hash].
  static final hash = obx.QueryStringProperty<File>(_entities[0].properties[2]);

  /// See [File.mimeType].
  static final mimeType =
      obx.QueryStringProperty<File>(_entities[0].properties[3]);

  /// See [File.sizeInBytes].
  static final sizeInBytes =
      obx.QueryIntegerProperty<File>(_entities[0].properties[4]);

  /// See [File.timeCreated].
  static final timeCreated =
      obx.QueryDateProperty<File>(_entities[0].properties[5]);

  /// See [File.timeLastModified].
  static final timeLastModified =
      obx.QueryDateProperty<File>(_entities[0].properties[6]);

  /// see [File.assignmentsToFolders]
  static final assignmentsToFolders =
      obx.QueryBacklinkToMany<FileInFolder, File>(FileInFolder_.file);
}

/// [FileInFolder] entity fields to define ObjectBox queries.
class FileInFolder_ {
  /// See [FileInFolder.id].
  static final id =
      obx.QueryIntegerProperty<FileInFolder>(_entities[1].properties[0]);

  /// See [FileInFolder.file].
  static final file =
      obx.QueryRelationToOne<FileInFolder, File>(_entities[1].properties[1]);

  /// See [FileInFolder.folder].
  static final folder =
      obx.QueryRelationToOne<FileInFolder, Folder>(_entities[1].properties[2]);
}

/// [Folder] entity fields to define ObjectBox queries.
class Folder_ {
  /// See [Folder.id].
  static final id =
      obx.QueryIntegerProperty<Folder>(_entities[2].properties[0]);

  /// See [Folder.name].
  static final name =
      obx.QueryStringProperty<Folder>(_entities[2].properties[1]);

  /// See [Folder.parent].
  static final parent =
      obx.QueryRelationToOne<Folder, Folder>(_entities[2].properties[2]);

  /// See [Folder.needsConfirmation].
  static final needsConfirmation =
      obx.QueryBooleanProperty<Folder>(_entities[2].properties[3]);

  /// see [Folder.children]
  static final children =
      obx.QueryBacklinkToMany<Folder, Folder>(Folder_.parent);

  /// see [Folder.assignmentsToFiles]
  static final assignmentsToFiles =
      obx.QueryBacklinkToMany<FileInFolder, Folder>(FileInFolder_.folder);
}

/// [FolderSuggestion] entity fields to define ObjectBox queries.
class FolderSuggestion_ {
  /// See [FolderSuggestion.id].
  static final id =
      obx.QueryIntegerProperty<FolderSuggestion>(_entities[3].properties[0]);

  /// See [FolderSuggestion.colorHex].
  static final colorHex =
      obx.QueryStringProperty<FolderSuggestion>(_entities[3].properties[1]);

  /// See [FolderSuggestion.folder].
  static final folder = obx.QueryRelationToOne<FolderSuggestion, Folder>(
      _entities[3].properties[2]);

  /// see [FolderSuggestion.file]
  static final file = obx.QueryRelationToMany<FolderSuggestion, File>(
      _entities[3].relations[0]);
}
