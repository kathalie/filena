// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/file_management/data/models/file_model.dart';
import 'features/folder_management/data/models/folder_model.dart';
import 'features/organizing_assistant/data/models/folder_suggestion_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 3198910070472308778),
      name: 'File',
      lastPropertyId: const obx_int.IdUid(7, 1926349587610987794),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 17814420269547781),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1219110727449541090),
            name: 'hash',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(9, 7915665274328151619)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 806464368252256299),
            name: 'mimeType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1109865782872316809),
            name: 'isFavourite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5445411653240817735),
            name: 'embeddings',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(10, 2244127150992752580),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 10,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1926349587610987794),
            name: 'currentVersion',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'parentFolders',
            srcEntity: 'Folder',
            srcField: 'assignedFiles'),
        obx_int.ModelBacklink(
            name: 'folderSuggestions',
            srcEntity: 'FolderSuggestion',
            srcField: 'files')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4597012346551900636),
      name: 'Folder',
      lastPropertyId: const obx_int.IdUid(6, 1841474384396990161),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4363378562645674842),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5757507134771395307),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7799192122444140566),
            name: 'embeddings',
            type: 28,
            flags: 8,
            indexId: const obx_int.IdUid(11, 624224797458424272),
            hnswParams: obx_int.ModelHnswParams(
              dimensions: 10,
              distanceType: 2,
            )),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7002970365571862900),
            name: 'isPending',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1841474384396990161),
            name: 'parentFolderId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(14, 3524152134377728438),
            relationTarget: 'Folder')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 2727919847388667980),
            name: 'assignedFiles',
            targetId: const obx_int.IdUid(7, 3198910070472308778))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'nestedFolders',
            srcEntity: 'Folder',
            srcField: 'parentFolder'),
        obx_int.ModelBacklink(
            name: 'folderSuggestions',
            srcEntity: 'FolderSuggestion',
            srcField: 'folder')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 9157757429217051349),
      name: 'FolderSuggestion',
      lastPropertyId: const obx_int.IdUid(4, 7864662996612991050),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4723021148355831887),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 513498909032251599),
            name: 'colorHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2421245002072396975),
            name: 'explanation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7864662996612991050),
            name: 'folderId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(15, 429392515660225108),
            relationTarget: 'Folder')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(6, 8590250266704814531),
            name: 'files',
            targetId: const obx_int.IdUid(7, 3198910070472308778))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(10, 9157757429217051349),
      lastIndexId: const obx_int.IdUid(15, 429392515660225108),
      lastRelationId: const obx_int.IdUid(6, 8590250266704814531),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        2933503222850296189,
        9188907239455043372,
        2434098858427425647,
        4018076896688383719,
        3488129098117443698,
        5437082916840256973,
        2271779336525364246
      ],
      retiredIndexUids: const [3097284329043120526, 8432660901793213549],
      retiredPropertyUids: const [
        6558802783405580143,
        9106844457950300752,
        5307462514647557182,
        2704966603259477581,
        2498238307875495402,
        3157540112820488283,
        5480118627372021280,
        2198361206089323603,
        3462129818280163342,
        8683618238728532890,
        2713778461944599971,
        8180727755434864447,
        2911965324716622281,
        97400929135809652,
        2745319765034613164,
        4123597128265334947,
        6101336469930320194,
        7511022337615134366,
        1044572771021859128,
        2323950138464305047,
        8131589153575687330,
        3086671693354985361,
        4337406317693720489,
        6873257003480021375,
        8146632672854709723,
        58758839606399882,
        7433343961898816464,
        5429908698803315048,
        8306910794455041071,
        1949053105250121225,
        6266102643616033405,
        304757736854911331,
        1152471620539843306,
        5625579071453894052,
        4394740505661027584,
        749559492770492987,
        3682903132046443271,
        1000748808178318440,
        146942432817682329,
        1808112662385733985,
        3390336334708104704,
        4171609210939420261,
        2282620523277041572,
        8279566911880169955
      ],
      retiredRelationUids: const [
        751356814963857588,
        673942337030042630,
        4878034946052678015
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    File: obx_int.EntityDefinition<File>(
        model: _entities[0],
        toOneRelations: (File object) => [],
        toManyRelations: (File object) => {
              obx_int.RelInfo<Folder>.toManyBacklink(4, object.id):
                  object.parentFolders,
              obx_int.RelInfo<FolderSuggestion>.toManyBacklink(6, object.id):
                  object.folderSuggestions
            },
        getId: (File object) => object.id,
        setId: (File object, int id) {
          object.id = id;
        },
        objectToFB: (File object, fb.Builder fbb) {
          final hashOffset = fbb.writeString(object.hash);
          final mimeTypeOffset = fbb.writeString(object.mimeType);
          final embeddingsOffset = fbb.writeListFloat32(object.embeddings);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, hashOffset);
          fbb.addOffset(3, mimeTypeOffset);
          fbb.addBool(4, object.isFavourite);
          fbb.addOffset(5, embeddingsOffset);
          fbb.addInt64(6, object.currentVersion);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final currentVersionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final hashParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final mimeTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final isFavouriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final embeddingsParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 14, []);
          final object = File(
              currentVersion: currentVersionParam,
              hash: hashParam,
              mimeType: mimeTypeParam,
              isFavourite: isFavouriteParam,
              embeddings: embeddingsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<File>(object.parentFolders,
              store, obx_int.RelInfo<Folder>.toManyBacklink(4, object.id));
          obx_int.InternalToManyAccess.setRelInfo<File>(
              object.folderSuggestions,
              store,
              obx_int.RelInfo<FolderSuggestion>.toManyBacklink(6, object.id));
          return object;
        }),
    Folder: obx_int.EntityDefinition<Folder>(
        model: _entities[1],
        toOneRelations: (Folder object) => [object.parentFolder],
        toManyRelations: (Folder object) => {
              obx_int.RelInfo<Folder>.toMany(4, object.id):
                  object.assignedFiles,
              obx_int.RelInfo<Folder>.toOneBacklink(6, object.id,
                      (Folder srcObject) => srcObject.parentFolder):
                  object.nestedFolders,
              obx_int.RelInfo<FolderSuggestion>.toOneBacklink(4, object.id,
                      (FolderSuggestion srcObject) => srcObject.folder):
                  object.folderSuggestions
            },
        getId: (Folder object) => object.id,
        setId: (Folder object, int id) {
          object.id = id;
        },
        objectToFB: (Folder object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final embeddingsOffset = fbb.writeListFloat32(object.embeddings);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, embeddingsOffset);
          fbb.addBool(4, object.isPending);
          fbb.addInt64(5, object.parentFolder.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final embeddingsParam =
              const fb.ListReader<double>(fb.Float32Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []);
          final isPendingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = Folder(
              name: nameParam,
              embeddings: embeddingsParam,
              isPending: isPendingParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.parentFolder.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.parentFolder.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Folder>(object.assignedFiles,
              store, obx_int.RelInfo<Folder>.toMany(4, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Folder>(
              object.nestedFolders,
              store,
              obx_int.RelInfo<Folder>.toOneBacklink(
                  6, object.id, (Folder srcObject) => srcObject.parentFolder));
          obx_int.InternalToManyAccess.setRelInfo<Folder>(
              object.folderSuggestions,
              store,
              obx_int.RelInfo<FolderSuggestion>.toOneBacklink(4, object.id,
                  (FolderSuggestion srcObject) => srcObject.folder));
          return object;
        }),
    FolderSuggestion: obx_int.EntityDefinition<FolderSuggestion>(
        model: _entities[2],
        toOneRelations: (FolderSuggestion object) => [object.folder],
        toManyRelations: (FolderSuggestion object) => {
              obx_int.RelInfo<FolderSuggestion>.toMany(6, object.id):
                  object.files
            },
        getId: (FolderSuggestion object) => object.id,
        setId: (FolderSuggestion object, int id) {
          object.id = id;
        },
        objectToFB: (FolderSuggestion object, fb.Builder fbb) {
          final explanationOffset = fbb.writeString(object.explanation);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.colorHex);
          fbb.addOffset(2, explanationOffset);
          fbb.addInt64(3, object.folder.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final colorHexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final explanationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = FolderSuggestion(
              colorHex: colorHexParam, explanation: explanationParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.folder.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.folder.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<FolderSuggestion>(
              object.files,
              store,
              obx_int.RelInfo<FolderSuggestion>.toMany(6, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [File] entity fields to define ObjectBox queries.
class File_ {
  /// See [File.id].
  static final id = obx.QueryIntegerProperty<File>(_entities[0].properties[0]);

  /// See [File.hash].
  static final hash = obx.QueryStringProperty<File>(_entities[0].properties[1]);

  /// See [File.mimeType].
  static final mimeType =
      obx.QueryStringProperty<File>(_entities[0].properties[2]);

  /// See [File.isFavourite].
  static final isFavourite =
      obx.QueryBooleanProperty<File>(_entities[0].properties[3]);

  /// See [File.embeddings].
  static final embeddings =
      obx.QueryHnswProperty<File>(_entities[0].properties[4]);

  /// See [File.currentVersion].
  static final currentVersion =
      obx.QueryIntegerProperty<File>(_entities[0].properties[5]);
}

/// [Folder] entity fields to define ObjectBox queries.
class Folder_ {
  /// See [Folder.id].
  static final id =
      obx.QueryIntegerProperty<Folder>(_entities[1].properties[0]);

  /// See [Folder.name].
  static final name =
      obx.QueryStringProperty<Folder>(_entities[1].properties[1]);

  /// See [Folder.embeddings].
  static final embeddings =
      obx.QueryHnswProperty<Folder>(_entities[1].properties[2]);

  /// See [Folder.isPending].
  static final isPending =
      obx.QueryBooleanProperty<Folder>(_entities[1].properties[3]);

  /// See [Folder.parentFolder].
  static final parentFolder =
      obx.QueryRelationToOne<Folder, Folder>(_entities[1].properties[4]);

  /// see [Folder.assignedFiles]
  static final assignedFiles =
      obx.QueryRelationToMany<Folder, File>(_entities[1].relations[0]);

  /// see [Folder.nestedFolders]
  static final nestedFolders =
      obx.QueryBacklinkToMany<Folder, Folder>(Folder_.parentFolder);

  /// see [Folder.folderSuggestions]
  static final folderSuggestions =
      obx.QueryBacklinkToMany<FolderSuggestion, Folder>(
          FolderSuggestion_.folder);
}

/// [FolderSuggestion] entity fields to define ObjectBox queries.
class FolderSuggestion_ {
  /// See [FolderSuggestion.id].
  static final id =
      obx.QueryIntegerProperty<FolderSuggestion>(_entities[2].properties[0]);

  /// See [FolderSuggestion.colorHex].
  static final colorHex =
      obx.QueryIntegerProperty<FolderSuggestion>(_entities[2].properties[1]);

  /// See [FolderSuggestion.explanation].
  static final explanation =
      obx.QueryStringProperty<FolderSuggestion>(_entities[2].properties[2]);

  /// See [FolderSuggestion.folder].
  static final folder = obx.QueryRelationToOne<FolderSuggestion, Folder>(
      _entities[2].properties[3]);

  /// see [FolderSuggestion.files]
  static final files = obx.QueryRelationToMany<FolderSuggestion, File>(
      _entities[2].relations[0]);
}
